import json
import os
import glob
from datetime import datetime
import statistics

class UnifiedDataAnalyzer:
    def __init__(self, data_dirs=None):
        if data_dirs is None:
            data_dirs = ["collected_data", "mobile_collected_data"]
        self.data_dirs = data_dirs
        self.all_data = []
    
    def load_all_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫"""
        for data_dir in self.data_dirs:
            if not os.path.exists(data_dir):
                print(f"‚ö† –ü–∞–ø–∫–∞ {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                continue
                
            json_files = glob.glob(os.path.join(data_dir, "*.json"))
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(json_files)} —Ñ–∞–π–ª–æ–≤ –≤ {data_dir}")
            
            for file_path in json_files:
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        data['_source_file'] = os.path.basename(file_path)
                        data['_source_dir'] = data_dir
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                        if 'device_type' not in data:
                            data['device_type'] = self.detect_device_type(data)
                            
                        self.all_data.append(data)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.all_data)}")
    
    def detect_device_type(self, data):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        user_agent = data.get('user_agent', '').lower()
        
        mobile_keywords = ['mobile', 'android', 'iphone', 'ipad', 'windows phone']
        desktop_keywords = ['windows', 'linux', 'macintosh', 'chrome', 'firefox']
        
        if any(keyword in user_agent for keyword in mobile_keywords):
            return 'mobile'
        elif any(keyword in user_agent for keyword in desktop_keywords):
            return 'desktop'
        else:
            return 'unknown'
    
    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.all_data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        stats = {
            'total_devices': len(self.all_data),
            'device_types': {},
            'browsers': {},
            'platforms': {},
            'resolutions': {},
            'timezones': {},
            'languages': {},
            'connection_types': {},
            'screen_stats': {},
            'mobile_specific': {},
            'desktop_specific': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for client in self.all_data:
            device_type = client.get('device_type', 'unknown')
            stats['device_types'][device_type] = stats['device_types'].get(device_type, 0) + 1
            
            # –ë—Ä–∞—É–∑–µ—Ä—ã
            browser = self.extract_browser(client.get('user_agent', ''))
            stats['browsers'][browser] = stats['browsers'].get(browser, 0) + 1
            
            # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platform = client.get('platform', 'unknown')
            stats['platforms'][platform] = stats['platforms'].get(platform, 0) + 1
            
            # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
            resolution = self.get_resolution(client)
            if resolution:
                stats['resolutions'][resolution] = stats['resolutions'].get(resolution, 0) + 1
            
            # –Ø–∑—ã–∫–∏
            language = client.get('language', 'unknown')
            stats['languages'][language] = stats['languages'].get(language, 0) + 1
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
            timezone = client.get('timezone', 'unknown')
            stats['timezones'][timezone] = stats['timezones'].get(timezone, 0) + 1
            
            # –¢–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
            if client.get('connection') and client['connection'] != 'unknown':
                conn_type = client['connection'].get('effectiveType', 'unknown')
                stats['connection_types'][conn_type] = stats['connection_types'].get(conn_type, 0) + 1
            
            # –ú–æ–±–∏–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞
            if device_type == 'mobile':
                self.analyze_mobile_specific(client, stats)
            # –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞
            elif device_type == 'desktop':
                self.analyze_desktop_specific(client, stats)
        
        return self.format_report(stats)
    
    def get_resolution(self, client):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
        if 'screen_width' in client and 'screen_height' in client:
            return f"{client['screen_width']}x{client['screen_height']}"
        elif 'screen_resolution' in client:
            return client['screen_resolution']
        else:
            return None
    
    def analyze_mobile_specific(self, client, stats):
        """–ê–Ω–∞–ª–∏–∑ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # Touch –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        touch = client.get('touch_support', False)
        stats['mobile_specific']['touch_devices'] = stats['mobile_specific'].get('touch_devices', 0) + (1 if touch else 0)
        
        # Multi-touch
        touch_points = client.get('max_touch_points', 0)
        if touch_points > 0:
            stats['mobile_specific']['multi_touch_devices'] = stats['mobile_specific'].get('multi_touch_devices', 0) + 1
        
        # –ë–∞—Ç–∞—Ä–µ—è
        if 'battery' in client:
            stats['mobile_specific']['battery_info_available'] = stats['mobile_specific'].get('battery_info_available', 0) + 1
    
    def analyze_desktop_specific(self, client, stats):
        """–ê–Ω–∞–ª–∏–∑ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        cores = client.get('hardware_concurrency')
        if cores and cores != 'unknown':
            stats['desktop_specific']['cpu_cores'] = stats['desktop_specific'].get('cpu_cores', []) + [int(cores)]
        
        memory = client.get('device_memory')
        if memory and memory != 'unknown':
            stats['desktop_specific']['memory_gb'] = stats['desktop_specific'].get('memory_gb', []) + [int(memory)]
    
    def extract_browser(self, user_agent):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–∑ User Agent"""
        ua = user_agent.lower()
        if 'chrome' in ua and 'edg' not in ua:
            return 'Chrome'
        elif 'firefox' in ua:
            return 'Firefox'
        elif 'safari' in ua and 'chrome' not in ua:
            return 'Safari'
        elif 'edg' in ua:
            return 'Edge'
        elif 'opera' in ua:
            return 'Opera'
        elif 'mobile' in ua:
            return 'Mobile Browser'
        else:
            return 'Other'
    
    def format_report(self, stats):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        report = [
            "üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ü–û –°–û–ë–†–ê–ù–ù–´–ú –î–ê–ù–ù–´–ú",
            "=" * 60,
            f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {stats['total_devices']}",
            "",
            "üì± –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –£–°–¢–†–û–ô–°–¢–í:",
        ]
        
        for device_type, count in stats['device_types'].items():
            percentage = (count / stats['total_devices']) * 100
            report.append(f"  {device_type}: {count} ({percentage:.1f}%)")
        
        report.extend([
            "",
            "üåê –ë–†–ê–£–ó–ï–†–´:",
        ])
        
        for browser, count in stats['browsers'].items():
            report.append(f"  {browser}: {count}")
        
        report.extend([
            "",
            "üíª –ü–õ–ê–¢–§–û–†–ú–´:",
        ])
        
        for platform, count in stats['platforms'].items():
            report.append(f"  {platform}: {count}")
        
        # –ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if 'mobile_specific' in stats and stats['device_types'].get('mobile', 0) > 0:
            report.extend([
                "",
                "üì± –ú–û–ë–ò–õ–¨–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê:",
                f"  –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π touch: {stats['mobile_specific'].get('touch_devices', 0)}",
                f"  –° multi-touch: {stats['mobile_specific'].get('multi_touch_devices', 0)}",
                f"  –° –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞—Ç–∞—Ä–µ–µ: {stats['mobile_specific'].get('battery_info_available', 0)}",
            ])
        
        # –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if 'desktop_specific' in stats and stats['device_types'].get('desktop', 0) > 0:
            cores = stats['desktop_specific'].get('cpu_cores', [])
            memory = stats['desktop_specific'].get('memory_gb', [])
            
            if cores:
                report.extend([
                    "",
                    "üñ•Ô∏è –î–ï–°–ö–¢–û–ü–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê:",
                    f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: {statistics.mean(cores):.1f}",
                    f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —è–¥–µ—Ä: {min(cores)}",
                    f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —è–¥–µ—Ä: {max(cores)}",
                ])
            
            if memory:
                report.extend([
                    f"  –°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å: {statistics.mean(memory):.1f} GB",
                    f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {min(memory)} GB", 
                    f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {max(memory)} GB",
                ])
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if stats['resolutions']:
            report.extend([
                "",
                "üìè –ü–û–ü–£–õ–Ø–†–ù–´–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø –≠–ö–†–ê–ù–û–í:",
            ])
            top_resolutions = sorted(stats['resolutions'].items(), key=lambda x: x[1], reverse=True)[:5]
            for resolution, count in top_resolutions:
                report.append(f"  {resolution}: {count}")
        
        # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if stats['timezones']:
            report.extend([
                "",
                "üåç –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:",
            ])
            for tz, count in list(stats['timezones'].items())[:5]:
                report.append(f"  {tz}: {count}")
        
        return "\n".join(report)
    
    def save_report(self, report, filename="unified_report.txt"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report)
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
    
    def show_detailed_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
        print("\n" + "=" * 70)
        print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –í–°–ï–ú –£–°–¢–†–û–ô–°–¢–í–ê–ú")
        print("=" * 70)
        
        for i, client in enumerate(self.all_data, 1):
            print(f"\n--- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ #{i} ---")
            print(f"–¢–∏–ø: {client.get('device_type', 'unknown')}")
            print(f"IP: {client.get('client_ip', 'N/A')}")
            print(f"–í—Ä–µ–º—è: {client.get('timestamp', 'N/A')}")
            
            resolution = self.get_resolution(client)
            if resolution:
                print(f"–≠–∫—Ä–∞–Ω: {resolution}")
            
            print(f"–ë—Ä–∞—É–∑–µ—Ä: {self.extract_browser(client.get('user_agent', ''))}")
            print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {client.get('platform', 'N/A')}")
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π User Agent
            ua = client.get('user_agent', 'N/A')
            if len(ua) > 60:
                ua = ua[:57] + "..."
            print(f"User Agent: {ua}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    analyzer = UnifiedDataAnalyzer()
    analyzer.load_all_data()
    
    if analyzer.all_data:
        report = analyzer.generate_comprehensive_report()
        print("\n" + report)
        
        analyzer.save_report(report)
        analyzer.show_detailed_info()
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ä–≤–µ—Ä –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

if __name__ == "__main__":
    main()
