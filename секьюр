# secur.py - Программа для просмотра защищенной информации
import os
import sys
import winreg
import json
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext

class SecurProtector:
    def __init__(self):
        self.student_name = "Шитый"
        
    def get_student_name(self):
        """Запрос фамилии студента"""
        root = tk.Tk()
        root.withdraw()
        
        student_name = simpledialog.askstring("Аутентификация", 
                                            "Введите фамилию студента для доступа к системной информации:")
        if student_name is None:
            return None
        return student_name.strip()
    
    def verify_signature(self, data, signature, public_key):
        """Проверка цифровой подписи"""
        try:
            data_str = json.dumps(data, sort_keys=True, ensure_ascii=False, indent=2)
            
            public_key.verify(
                signature,
                data_str.encode('utf-8'),
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            return True
        except Exception as e:
            print(f"Ошибка проверки подписи: {e}")
            return False
    
    def get_signature_from_registry(self, student_name):
        """Получение подписи из реестра"""
        try:
            registry_path = f"Software\\{student_name}"
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, registry_path) as key:
                signature, _ = winreg.QueryValueEx(key, "Signature")
                return signature
        except Exception as e:
            print(f"Ошибка чтения из реестра: {e}")
            return None
    
    def load_public_key(self, install_folder):
        """Загрузка публичного ключа из файла"""
        try:
            public_key_path = os.path.join(install_folder, "public_key.pem")
            with open(public_key_path, "rb") as f:
                public_key = serialization.load_pem_public_key(f.read())
            return public_key
        except Exception as e:
            print(f"Ошибка загрузки публичного ключа: {e}")
            return None
    
    def load_system_info(self, tat_path):
        """Загрузка системной информации из файла"""
        try:
            with open(tat_path, 'r', encoding='utf-8') as f:
                system_info = json.load(f)
            return system_info
        except Exception as e:
            print(f"Ошибка чтения файла: {e}")
            return None
    
    def show_system_info(self, system_info):
        """Отображение системной информации"""
        root = tk.Tk()
        root.title("Системная информация - Защищенный просмотр")
        root.geometry("700x500")
        
        # Создаем фрейм с прокруткой
        frame = tk.Frame(root)
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Добавляем заголовок
        title_label = tk.Label(frame, text="СИСТЕМНАЯ ИНФОРМАЦИЯ", 
                              font=("Arial", 14, "bold"))
        title_label.pack(pady=(0, 10))
        
        # Создаем текстовое поле с прокруткой
        text_widget = scrolledtext.ScrolledText(frame, wrap=tk.WORD, font=("Arial", 10))
        text_widget.pack(fill=tk.BOTH, expand=True)
        
        # Форматируем информацию для отображения
        display_text = "=" * 60 + "\n"
        for key, value in system_info.items():
            display_text += f"{key}: {value}\n"
        display_text += "=" * 60 + "\n"
        display_text += f"\nИнформация защищена цифровой подписью\nФамилия студента: {self.student_name}"
        
        text_widget.insert("1.0", display_text)
        text_widget.config(state="disabled")
        
        # Кнопка закрытия
        close_button = tk.Button(frame, text="Закрыть", command=root.destroy, font=("Arial", 10))
        close_button.pack(pady=10)
        
        root.mainloop()
    
    def run(self):
        """Основной метод программы"""
        # Получаем фамилию студента
        input_name = self.get_student_name()
        if not input_name:
            messagebox.showerror("Ошибка", "Фамилия не введена!")
            sys.exit(1)
        
        if input_name != self.student_name:
            messagebox.showerror("Ошибка", 
                               f"Неверная фамилия!\n"
                               f"Введено: {input_name}\n"
                               f"Ожидается: {self.student_name}")
            sys.exit(1)
        
        # Определяем путь к sys.tat
        if len(sys.argv) > 1:
            tat_path = sys.argv[1]
        else:
            # Ищем в текущей директории
            current_dir = os.path.dirname(os.path.abspath(__file__))
            tat_path = os.path.join(current_dir, "sys.tat")
        
        if not os.path.exists(tat_path):
            messagebox.showerror("Ошибка", 
                               f"Файл sys.tat не найден!\n"
                               f"Путь: {tat_path}\n\n"
                               f"Убедитесь, что файл находится в той же папке, что и secur.py")
            sys.exit(1)
        
        # Загружаем системную информацию
        system_info = self.load_system_info(tat_path)
        if not system_info:
            messagebox.showerror("Ошибка", "Не удалось загрузить системную информацию!")
            sys.exit(1)
        
        # Получаем подпись из реестра
        signature = self.get_signature_from_registry(input_name)
        if not signature:
            messagebox.showerror("Ошибка", 
                               "Не удалось получить цифровую подпись из реестра!\n"
                               "Возможно, программа установки не была запущена.")
            sys.exit(1)
        
        # Загружаем публичный ключ
        install_folder = os.path.dirname(tat_path)
        public_key = self.load_public_key(install_folder)
        if not public_key:
            messagebox.showerror("Ошибка", "Не удалось загрузить публичный ключ!")
            sys.exit(1)
        
        # Проверяем подпись
        if self.verify_signature(system_info, signature, public_key):
            messagebox.showinfo("Успех", "Цифровая подпись подтверждена!\nОткрываю системную информацию...")
            self.show_system_info(system_info)
        else:
            messagebox.showerror("Ошибка безопасности", 
                               "Цифровая подпись недействительна!\n"
                               "Доступ к информации запрещен.\n\n"
                               "Возможные причины:\n"
                               "• Файл sys.tat был изменен\n"
                               "• Подпись в реестре повреждена\n"
                               "• Ключи шифрования не соответствуют")
            sys.exit(1)

if __name__ == "__main__":
    protector = SecurProtector()
    protector.run()
