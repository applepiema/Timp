from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import os
from datetime import datetime
import socket
import threading

class MobileDataCollectorHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if self.path == '/':
            # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            html_content = '''
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        max-width: 100%;
                        padding: 20px;
                        margin: 0;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        min-height: 100vh;
                    }
                    .container {
                        background: rgba(255,255,255,0.1);
                        backdrop-filter: blur(10px);
                        padding: 30px;
                        border-radius: 15px;
                        margin: 20px auto;
                        max-width: 600px;
                    }
                    .progress {
                        height: 20px;
                        background: rgba(255,255,255,0.2);
                        border-radius: 10px;
                        margin: 20px 0;
                        overflow: hidden;
                    }
                    .progress-bar {
                        height: 100%;
                        background: #4CAF50;
                        width: 0%;
                        transition: width 0.5s ease;
                    }
                    .status {
                        margin: 10px 0;
                        padding: 15px;
                        border-radius: 8px;
                        background: rgba(255,255,255,0.2);
                    }
                    .device-info {
                        background: rgba(255,255,255,0.1);
                        padding: 15px;
                        border-radius: 8px;
                        margin: 10px 0;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</h1>
                    <p>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...</p>
                    
                    <div class="progress">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                    
                    <div id="statusMessages"></div>
                    
                    <div id="deviceInfo" style="display: none;">
                        <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</h3>
                        <div id="deviceInfoContent"></div>
                    </div>
                </div>

                <script>
                    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - —Å–æ–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    function collectMobileInfo() {
                        const info = {
                            // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
                            user_agent: navigator.userAgent,
                            platform: navigator.platform,
                            vendor: navigator.vendor,
                            language: navigator.language,
                            languages: navigator.languages,
                            
                            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–µ
                            screen_width: screen.width,
                            screen_height: screen.height,
                            available_width: screen.availWidth,
                            available_height: screen.availHeight,
                            color_depth: screen.colorDepth,
                            pixel_depth: screen.pixelDepth,
                            
                            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                            touch_support: 'ontouchstart' in window,
                            max_touch_points: navigator.maxTouchPoints || 0,
                            hardware_concurrency: navigator.hardwareConcurrency || 'unknown',
                            device_memory: navigator.deviceMemory || 'unknown',
                            
                            // –°–µ—Ç–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                            connection: navigator.connection ? {
                                effectiveType: navigator.connection.effectiveType,
                                downlink: navigator.connection.downlink,
                                rtt: navigator.connection.rtt,
                                saveData: navigator.connection.saveData
                            } : 'unknown',
                            
                            // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ –≤—Ä–µ–º—è
                            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                            timezone_offset: new Date().getTimezoneOffset(),
                            
                            // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                            features: {
                                cookies: navigator.cookieEnabled,
                                java: navigator.javaEnabled(),
                                pdf: navigator.pdfViewerEnabled,
                                webgl: checkWebGL(),
                                service_worker: 'serviceWorker' in navigator,
                                local_storage: !!window.localStorage,
                                session_storage: !!window.sessionStorage,
                                geolocation: 'geolocation' in navigator,
                                notifications: 'Notification' in window,
                                vibration: 'vibrate' in navigator,
                                battery: 'getBattery' in navigator
                            },
                            
                            // –ü–ª–∞–≥–∏–Ω—ã
                            plugins: Array.from(navigator.plugins).map(p => ({
                                name: p.name,
                                filename: p.filename
                            })),
                            
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            viewport_width: window.innerWidth,
                            viewport_height: window.innerHeight,
                            device_pixel_ratio: window.devicePixelRatio,
                            local_time: new Date().toLocaleString('ru-RU'),
                            url: window.location.href
                        };

                        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
                        if ('getBattery' in navigator) {
                            navigator.getBattery().then(battery => {
                                info.battery = {
                                    level: battery.level,
                                    charging: battery.charging,
                                    charging_time: battery.chargingTime,
                                    discharging_time: battery.dischargingTime
                                };
                                sendData(info);
                            }).catch(() => sendData(info));
                        } else {
                            sendData(info);
                        }

                        return info;
                    }

                    function checkWebGL() {
                        try {
                            const canvas = document.createElement('canvas');
                            return !!(window.WebGLRenderingContext && 
                                     (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
                        } catch(e) {
                            return false;
                        }
                    }

                    function updateProgress(percent, message) {
                        document.getElementById('progressBar').style.width = percent + '%';
                        addStatusMessage(message);
                    }

                    function addStatusMessage(message) {
                        const statusDiv = document.getElementById('statusMessages');
                        const messageDiv = document.createElement('div');
                        messageDiv.className = 'status';
                        messageDiv.textContent = message;
                        statusDiv.appendChild(messageDiv);
                    }

                    function showDeviceInfo(info) {
                        const infoDiv = document.getElementById('deviceInfoContent');
                        let html = '<div class="device-info">';
                        
                        html += `<strong>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</strong> ${info.platform}<br>`;
                        html += `<strong>–≠–∫—Ä–∞–Ω:</strong> ${info.screen_width}x${info.screen_height}<br>`;
                        html += `<strong>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ touch:</strong> ${info.touch_support ? '–î–∞' : '–ù–µ—Ç'}<br>`;
                        html += `<strong>–Ø–∑—ã–∫:</strong> ${info.language}<br>`;
                        html += `<strong>–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞:</strong> ${info.timezone}<br>`;
                        
                        if (info.connection && info.connection !== 'unknown') {
                            html += `<strong>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:</strong> ${info.connection.effectiveType}<br>`;
                        }
                        
                        html += '</div>';
                        infoDiv.innerHTML = html;
                        document.getElementById('deviceInfo').style.display = 'block';
                    }

                    function sendData(info) {
                        fetch('/collect', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(info)
                        })
                        .then(response => response.text())
                        .then(data => {
                            updateProgress(100, '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                            showDeviceInfo(info);
                        })
                        .catch(error => {
                            addStatusMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error);
                        });
                    }

                    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    window.addEventListener('load', function() {
                        updateProgress(10, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
                        setTimeout(() => {
                            updateProgress(30, '–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ...');
                            setTimeout(() => {
                                updateProgress(70, '–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...');
                                const info = collectMobileInfo();
                            }, 1000);
                        }, 500);
                    });
                </script>
            </body>
            </html>
            '''
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(html_content.encode('utf-8'))
        
        elif self.path == '/mobile':
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            mobile_html = '''
            <html>
            <head><title>Mobile Check</title></head>
            <body>
                <h2>Mobile Device Check</h2>
                <div id="info">Collecting information...</div>
                <script>
                    var info = {
                        ua: navigator.userAgent,
                        w: screen.width,
                        h: screen.height,
                        t: new Date().toString()
                    };
                    fetch('/collect', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify(info)
                    }).then(() => {
                        document.getElementById('info').innerHTML = 'Check complete!';
                    });
                </script>
            </body>
            </html>
            '''
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(mobile_html.encode('utf-8'))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        if self.path == '/collect':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                client_data = json.loads(post_data.decode('utf-8'))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                client_data['client_ip'] = self.client_address[0]
                client_data['timestamp'] = datetime.now().isoformat()
                client_data['server_host'] = socket.gethostname()
                client_data['user_agent'] = self.headers.get('User-Agent', 'Unknown')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                user_agent = client_data.get('user_agent', '').lower()
                if any(word in user_agent for word in ['mobile', 'android', 'iphone', 'ipad']):
                    client_data['device_type'] = 'mobile'
                else:
                    client_data['device_type'] = 'desktop'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.save_client_data(client_data)
                
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
                
            except Exception as e:
                print(f"Error processing data: {e}")
                self.send_response(500)
                self.end_headers()
    
    def save_client_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        data_dir = "mobile_collected_data"
        if not os.path.exists(data_dir):
            os.makedirs(data_dir)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ IP –∏ –≤—Ä–µ–º–µ–Ω–∏
        ip = data['client_ip'].replace(':', '_').replace('.', '_')
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        device_type = data.get('device_type', 'unknown')
        filename = f"{device_type}_{ip}_{timestamp}.json"
        filepath = os.path.join(data_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print(f"üì± –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data.get('device_type', 'unknown')}")
        print(f"   User Agent: {data.get('user_agent', 'unknown')[:50]}...")
    
    def log_message(self, format, *args):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"{datetime.now().strftime('%H:%M:%S')} - {self.client_address[0]} - {format % args}")

def get_windows_ip():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –Ω–∞ Windows"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å IP
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
    except:
        try:
            return socket.gethostbyname(socket.gethostname())
        except:
            return '127.0.0.1'

def run_server(port=8080):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Windows"""
    local_ip = get_windows_ip()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    server_address = ('0.0.0.0', port)
    httpd = HTTPServer(server_address, MobileDataCollectorHandler)
    
    print("=" * 60)
    print("üåê –ú–û–ë–ò–õ–¨–ù–´–ô –°–ï–†–í–ï–† –°–ë–û–†–ê –î–ê–ù–ù–´–• –ó–ê–ü–£–©–ï–ù")
    print("=" * 60)
    print(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:{port}")
    print(f"–°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø: http://{local_ip}:{port}")
    print(f"–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: http://{local_ip}:{port}/mobile")
    print("=" * 60)
    print("üì± –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ —Å –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏:")
    print("   - –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã")
    print("   - –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏") 
    print("   - –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤–∞—à–µ–π Wi-Fi —Å–µ—Ç–∏")
    print("=" * 60)
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    run_server()
